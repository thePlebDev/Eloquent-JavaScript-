-----------------------------------------THE SECRET LIFE OF OBJECTS-------------------------------------------
- the core idea in object-oriented programming is to divide programs into smaller pieces and make each
piece responsible for managing its own state.
- different pieces of such a program interact with each other through interfaces, limited sets of functions
or bindings that provide useful functionality are a more abstract level, hiding their precise implementation
- properties that are part of the interface are called public. the Other which outside code should not be
touching, are called private.
- javascript does  not have a way to distinguish between private and local methods

- when a method is called, like object.method(), the binding of this in its body automatically points at
the object that it was called on.

- in a regular function this will refer to the wrapping scope
- arrow functions are different they do not bind their own this but can see the this binding of the scope
around them

Prototypes:
-a prototype is another object that is used as a fallback source of properties. When an object gets a request
for a property that it does not have , its prototype will be searched
- the prototype behind almost all objects is Object.prototype


CLASSES:
- javascript prototypes can be interpreted as a somewhat informal take on an object-oriented concept called
classes
-a class defines tha shape of a type of object. what methods and properties it has. Such an object is called
an instance of the class.
- so to create an instance of a given class, you have to make an object that derives from the proper
prototype, but you also have to make sure it, itself, has the properties that instances of this class
are supposed to have. This is what a constructor function does
- when you put the new keyword infront of a function call, the functions i s treated as a constructor. This means that
an object with the right prototype is automatically created, bound to this in the function and returned at the end of
function
- all functions automatically get a property named prototype, which by default holds a plain, empty obejct that
derives from Object.prototype
- It is important to understand the distinction between the way a prototype is associated with a constructor
(through its prototype property) and the way objects have a prototype(which can be found with Object.getPrototypeOf)
-The actual prototype of a constructor is Function.prototype since constructos are functions. its prototype holds the
prototype used for instance created through it.

Map:
  - A map is a data structure that associated values(the keys)with other values. for example, you would map name to ages
  - you must not use plain objects as a map but javascript has a built in Map object that can be used


POLYMORPHISM:
  -polymorphic code can work with values of different shpaes, as long as they support they support the interface
  it expects. a for loop can iterate over serveral kinds of data structures. This is another case of POLYMORPHISM


SYMBOLS:
  - it is possible for multiple interfaces to use the same property name for different things. property names can be
  strings but they can also be symbols. Symbols are values created with the Symbol function. Unlike strings, newly created
  symbols are unique, you cannot create the same symbol twice.but symbols may have the same name.

THE ITERATOR INTERFACE:
  - The object given wo a for/of loop is expected to be iterable. This means it has a method named with the Symbol.iterator
  symbol.
  - When called, that method should return an object that provides a second interface, iterator. This is the actual
  thing that gets iterates. It has a next method that returns the next result.

GETTERS,SETTERS AND STATICS:
  - for some objects it is unessessary  for an object to compute and store such a property directly in the instance.
  even properties that are accessed directly may hide a method call. Such methods are called getters, and accessed
  directl may hide a method call. Such methods are called getters. you define these two methods by putting get and set
  in front instead of the function call

  - getters and setters in javascript are used for defining computed properties, or accessors. a computed property being
  one that uses a function to get or set an object value.
  - the get syntaz binds an object property to a function that will be called when that property is looked up.
  - the set syntax binds an objet property to a function to be called when there is an attempt to set that property


  - so right now I am not 100% on classes in javascript so I am going to read up on them a bit
  - a class is a set of objects that inherit properties from the same prototype object.
  - it is common to define a function that creates and initializes the new object"factory function". this is not the
  idiomatic way to define javascript classes because it did not define a constructor
  - when using a constructor, the shared methods should be stored on the prototype
  - every javascript function automatically has a prototype property. the value of this


  - the idea of encapsulation is to divide pieces into smaller parts and make them responsible for managing its
  own state.

  -different pieces of code interact with eachother through interfaces, which are limited sets of functions or
  bindings that provide useful functionality at a more abstract level

  -since each function has its own this binding, the value of 'this' depends on how it is called


  - most objects have a prototype. which is just another object that is used as a fallbacksource of properties.
  -Symbols are values created with the symbol function. Unlike strings, newly created symbols are unique, you can not
  create the same symbol function twice.

  - when something calls for object to be iterable.This means it has a method named with the Symbol.iterator symbol
  - getters are used to access properties and setters are used to mutate them.

  - the get syntax binds an object property to a function that will be called when that property is looked up
  - the reason you would use getters and setters over a standard function is that getters/setters are automatically
  invoked on assignment. So it looks like a normal property but behind that scenes you can have extra logic(checks)
  to be run just before or after the assignment
  - getters and setters can be used for data hiding

  -when we use the extend keyword we are telling javascrip that the class we want to base our class on.
  - the new operator does the initialization of this to a newly allocated object. this does not happen automatically
  for a class defined by the extends keyword
  - when subclassing the this intialization to a newly allocated object is always dependant on the parent class
  constructor, which is the constructor class from which we are extending
  - to fix this you need to use the super() operator, that will give the initialized 'this' to the parent constructor

  - the constuctor enables us to provide any custom initialization that must be done before any other methods
  can be called on an instantiated obejct.
  - also classes are nor hoisted like functions are.
  - ok that vector question was actually way easier than I thought

  - so for the add function, just a super basic looping of an array if the thing is in the array do nothing and return
  but if it is not in the array then all add it and return the list. when we push we are adding values to the end of the
  array. so I can not use the delete method because it doesnt chagne the length prperty it just makes the array sparse


  - the delete function is litterally the same thing but instead of pushing we need to pop a certain value. cool
  so now the delete works
  so for the last one we need to create a static method called from that takes an iterable object as argument and creates
  a group that contains all the vlaues produced by iterating over it

  - so read up on what static methods are.
  - so a static mehtod is a method that you define on a class but it is not part of the instanciated object, meaning that
  you do not need an instance of the class. you call it directly form the class, not the object that is created with the
  new keyword.
  - that static method was unfortunately easy, I feel like just looping over everything was not the play but I did it anyways so
  whatever, it works 
